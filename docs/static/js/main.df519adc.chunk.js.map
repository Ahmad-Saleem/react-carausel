{"version":3,"sources":["components/Carousel/Image.js","components/Carousel/Slide.js","components/Carousel/SVGIcons.js","components/Carousel/NavBtn.js","components/Carousel/Slider.js","components/Carousel/index.js","App.js","serviceWorker.js","index.js"],"names":["Image","react_default","a","createElement","id","this","props","className","src","alt","PureComponent","Slide","children","Arrow","_ref","width","height","color","transform","xmlns","fill","viewBox","d","NextBtn","onClick","e","PrevBtn","_ref2","NextArrow","_ref3","Fragment","SVGIcons_Arrow","PrevArrow","_ref4","API_URL","Slider","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","that","assertThisInitialized","axios","get","then","response","data","hits","images","filter","hit","i","map","largeImageURL","setState","_resize","catch","error","console","log","window","addEventListener","_this$props$setting","setting","imagesCountPerSlide","responsive","slideMargin","state","slideWidth","innerWidth","slidesCount","length","responsiveSorted","sort","b","breakPoint","responsiveFiltered","item","imagesCount","currentIndex","translateValue","_goToCenter","_swipStart","pageX","changedTouches","swipStart","_swipEnd","_next","_prev","_this$state","_this$state2","_this$state3","Math","floor","_getContainerWidth","_this$state4","swipEnd","bind","removeEventListener","nextProps","nextState","_this$state5","style","maxWidth","concat","transition","onTouchStart","onTouchEnd","url","Slide_Slide","key","Image_Image","NavBtn_NextArrow","NavBtn_PrevArrow","NavBtn_PrevBtn","NavBtn_NextBtn","Component","SETTING","App","Carousel","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df519adc.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nexport default class Image extends PureComponent {\n    render(){\n        return(\n            <img id={this.props.id} className={this.props.className}\n            src={this.props.src} alt=\"\" />\n        );\n    }\n}","import React, { PureComponent } from 'react';\n\nexport default class Slide extends PureComponent {\n    render(){\n        return(\n            <div className=\"carousel-slide\">\n                {this.props.children}\n            </div>\n        );\n    }\n}","import React from 'react';\n\nexport const Arrow = ({width, height, color, transform}) => <svg  xmlns=\"http://www.w3.org/2000/svg\"\nwidth={width} height={height} fill={color} viewBox=\"0 0 37.6 62.6\" transform={transform}>\n<g>\n<path d=\"M3.5,2.1C13.3,12,23.1,20,32.8,29.9C23.1,39.9,13.3,48,3.5,58.1c0-5,0-8,0-13c5.3-4.8,10.6-9.5,16.6-14.9\n   c-6-5.5-11.3-10.3-16.6-15.1C3.5,10.1,3.5,7.1,3.5,2.1z\"/>\n</g>\n</svg>\n\n\n","import React from 'react';\nimport {Arrow} from './SVGIcons';\n\nexport const NextBtn = ({onClick}) => \n    <button onClick={(e) => onClick(e)} \n        className=\"carousel-button next\">\n        Next\n    </button>\n   \n\nexport const PrevBtn = ({onClick}) => <button onClick={(e) => onClick(e)} \n    className=\"carousel-button prev\">\n    Prev\n</button>\n\nexport const NextArrow = ({onClick}) => <React.Fragment>\n        <button onClick={(e) => onClick(e)} \n            className=\"carousel-arrow next\">\n            <Arrow width=\"24\" alt=\"Next\"color=\"#2b73a1\" />\n        </button>\n        <div className=\"carousel-arrow-conatiner next\"></div>\n    </React.Fragment>\n\nexport const PrevArrow = ({onClick}) => <React.Fragment>\n    <button onClick={(e) => onClick(e)} \n        className=\"carousel-arrow prev\">\n        <Arrow width=\"24\"  transform='rotate(180)' color=\"#2b73a1\" />\n    </button> \n    <div className=\"carousel-arrow-conatiner prev\"></div>\n</React.Fragment>\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Slide from './Slide';\nimport Image from \"./Image\";\nimport {NextBtn, PrevBtn, NextArrow, PrevArrow } from './NavBtn';\n\n\nconst API_URL = \"https://pixabay.com/api/?key=11414444-1602fd7be308abaef8e394c73&q=london&image_type=photo&pretty=true\";\n\nexport default class Slider extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            images: [],\n            imagesCount: 0,\n            currentIndex: 0,\n            translateValue: 0,\n            swipStart: 0,\n            swipEnd: 0,\n            imagesCountPerSlide: 1, \n            slideWidth: 300,\n            slideMargin: 10,\n        }\n\n        this._resize = this._resize.bind(this);\n    }\n\n    /**\n     * get images from api and set result to state,\n     * apply resize function after get images\n     */\n    componentDidMount = () => {\n        let that = this;\n        axios.get(API_URL).then((response) => {\n            if(response.data.hits){\n            const images = response.data.hits\n            .filter((hit,i)=>i<12)\n            .map(hit => hit.largeImageURL);\n\n            that.setState({images});\n            that._resize();\n            }\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n\n        window.addEventListener('resize', this._resize);\n        \n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this._resize);\n    }\n    /**\n     resize event hanler,\n     set the count of slide that will be displayed in one view,\n     using the setting passed by props.\n     the default value is one slide per view.\n    */\n    _resize = () => {\n        const { setting:  {imagesCountPerSlide, responsive, slideMargin}} = this.props; \n        const { images } = this.state;\n\n        const slideWidth = window.innerWidth;\n        // default is one\n        let slidesCount = imagesCountPerSlide || 1;\n\n        // process responsivity from setting props.\n        if(responsive.length > 0){\n            const responsiveSorted = responsive.sort(\n                (a,b) => (a.breakPoint > b.breakPoint) ? 1 : ((b.breakPoint < a.breakPoint) ? -1 : 0));\n            \n            const responsiveFiltered = responsiveSorted.filter(item => item.breakPoint >= slideWidth);\n            \n            const responsiveItem = responsiveFiltered.length === 0 ? responsiveSorted[responsiveSorted.length - 1] : responsiveFiltered[0];\n    \n            slidesCount = responsiveItem.slidesCount;\n        }\n               \n        this.setState({\n            images,\n            imagesCount: images.length,\n            slideWidth,\n            imagesCountPerSlide: slidesCount,\n            slideMargin,\n            currentIndex: 0,\n            translateValue: 0,\n        });\n        if(slidesCount === 1){\n            this._goToCenter();\n        }\n    }\n\n    /**\n     * handle start touching to swipe slide\n     */\n    _swipStart = (e) => {\n        const obj = e.changedTouches[0];\n        const { pageX } = obj;\n        this.setState({swipStart: pageX});\n    }\n\n    /**\n     * handle end of touching to swipe slide,\n     * determine the direction, by calc the distance,\n     * between first touch point and end touch point \n     */\n    _swipEnd = (e) => {\n        const { pageX }  = e.changedTouches[0];\n        const { swipStart } = this.state;\n        if(pageX - swipStart < 0){\n            this._next();\n        }else {\n            this._prev();\n        }\n    }\n\n\n    /**\n     * handle next slide event\n     */\n    _next = () => {\n        let { imagesCount, currentIndex, translateValue, imagesCountPerSlide, slideWidth, slideMargin } = this.state; \n        const margin = imagesCountPerSlide > 1 ? slideMargin*imagesCountPerSlide : 0;\n        \n        if(currentIndex + imagesCountPerSlide >= imagesCount ){\n            // do nothing\n        }else {\n            currentIndex += imagesCountPerSlide;\n            translateValue = translateValue - slideWidth - margin;\n            this.setState({\n                currentIndex,\n                translateValue,\n              });\n        }\n     \n    }\n\n    /**\n     * handle prev slide event\n     */\n    _prev = () => {\n        let { currentIndex, translateValue, imagesCountPerSlide, slideWidth, slideMargin } = this.state; \n        const margin = imagesCountPerSlide > 1 ? slideMargin*imagesCountPerSlide : 0;\n\n        if(currentIndex <= 0){\n            currentIndex = 0;\n            translateValue = 0;\n        }else {\n            currentIndex-=imagesCountPerSlide;\n            translateValue = translateValue + slideWidth + margin;\n        }\n        this.setState({\n            currentIndex,\n            translateValue,\n          });\n    }\n\n    _goToCenter = () => {\n        let { imagesCount, currentIndex, translateValue, imagesCountPerSlide, slideWidth } = this.state; \n        if(currentIndex + imagesCountPerSlide >= imagesCount ){\n            // do nothing\n        }else {\n            currentIndex = Math.floor(imagesCount/2);\n            translateValue = translateValue - ((slideWidth) * Math.floor(imagesCount/2));\n            this.setState({\n                currentIndex,\n                translateValue,\n              });\n        }\n     \n    }\n\n    /**\n     * calc width of slider container\n     */\n    _getContainerWidth = () => {\n        const {slideWidth, imagesCount, imagesCountPerSlide, slideMargin} = this.state;\n        const containerWidth  = imagesCountPerSlide > 1 ?\n                (slideWidth * imagesCount / imagesCountPerSlide) + ((imagesCount-2)* slideMargin) :\n                (slideWidth * imagesCount / imagesCountPerSlide);\n        return containerWidth;\n    }\n\n    /**\n     * \n     * @param {*} nextProps \n     * @param {*} nextState \n     * prevent re-rendering when start touching to swipe\n     */\n    shouldComponentUpdate(nextProps, nextState) {\n        if(this.state.swipStart !== nextState.swipStart){\n            return false;\n        }\n        return true;\n    }\n    \n\n    render(){\n        const {slideWidth, translateValue, images, imagesCountPerSlide} = this.state;\n      \n        return(\n            <div className=\"carousel-slider\" style={{maxWidth: `${slideWidth}px`}}>\n                <div className={`carousel-container ${imagesCountPerSlide > 1 ? 'desktop' : ''}`}\n                     style={{\n                        transform: `translateX(${translateValue}px)`,\n                        transition: 'transform ease-out 0.30s',\n                        width: `${this._getContainerWidth()}px`\n                      }} \n                      onTouchStart={this._swipStart.bind(this)}\n                      onTouchEnd={this._swipEnd.bind(this)}\n                      >\n\n                    { images.map( (url, i) => <Slide key={i}>\n                        <Image src={url} id={`carousel-image-${i+1}`} \n                            className=\"carousel-image\" />\n                            <h1>Image Title {i+1}</h1>\n                    </Slide>)}\n                    \n                </div>\n                      {\n                          imagesCountPerSlide === 1 && <React.Fragment>\n                                <NextArrow  onClick={this._next}/>\n                                <PrevArrow  onClick={this._prev}/>\n                          </React.Fragment>\n                      }\n                {imagesCountPerSlide > 1 && <div className=\"carosel-nav-desktop\">\n                    <PrevBtn onClick={this._prev} />\n                    <NextBtn onClick={this._next} />\n                </div>}\n            </div>\n        );\n    }\n}","import Image from './Image';\nimport Slider from './Slider';\n\nexport { Image };\nexport default Slider;","import React, { Component } from 'react';\nimport Slider from './components/Carousel'\nimport \"./assets/css/main.css\";\nimport \"./assets/css/carousel.css\";\n\n\nconst SETTING = {\n  responsive: [\n    {\n      breakPoint: 360,\n      slidesCount: 1,\n    },\n    {\n      breakPoint: 480,\n      slidesCount: 2,\n    },\n    {\n      breakPoint: 640,\n      slidesCount: 3,\n    },\n    {\n      breakPoint: 760,\n      slidesCount: 4,\n    }\n  ],\n  slideMargin: 10,\n}\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <h1>Carousel Test</h1>\n\n        <Slider setting={SETTING} images={[]} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}